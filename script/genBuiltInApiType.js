/**
 * @description 生成内置api类型
 * @author 尘随风染
 */
import { fileURLToPath } from "url";
import { dirname, resolve } from "path";
import { writeFileSync, readFileSync, readdirSync } from "fs";
import chalk from "chalk";
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const invokesPath = resolve(__dirname, "../src/invokes");
let content = "";
let declareContent = "";
const genType = process.argv[2] || "api";
try {
  console.log("🚀", "开始生成内置API的类型文件");
  console.time(chalk.green("generate use time"));
  const dirs = readdirSync(invokesPath, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name);
  dirs.forEach((dir) => {
    const dirPath = resolve(invokesPath, dir);
    const files = readdirSync(dirPath);

    if (files.includes("index.ts")) {
      const indexFilePath = resolve(dirPath, "index.ts");
      const fileContent = readFileSync(indexFilePath, "utf-8");
      if (/\sdisabled:\s?(true|([1-9][0-9]*)),?/.test(fileContent)) {
        console.warn(
          "⚠️ ",
          chalk.blue(indexFilePath),
          chalk.yellow(":本API已被禁用，跳过类型文件生成")
        );
        return;
      }
      if (genType === "declare") {
        declareContent += `\n      ${dir}: typeof import("../../invokes/${dir}/exportFn")["${dir}Fn"];`;
      } else {
        content += `  ${dir}: typeof import("../../invokes/${dir}/exportFn")["${dir}Fn"];\n`;
        declareContent += `\n      ${dir}: typeof import("../../invokes/${dir}/exportFn")["${dir}Fn"];`;
      }
    } else {
      const subDirs = readdirSync(dirPath, { withFileTypes: true })
        .filter((dirent) => dirent.isDirectory())
        .map((dirent) => dirent.name);
      if (genType === "declare") {
        declareContent += `\n      ${dir}: {`;
        //添加一个属性，用于存放当前命名空间的通用数据，此属性不提供给编辑器的类型声明
        declareContent += `\n        __NS_DATA__: Record<string, any>;`;
        subDirs.forEach((subDir) => {
          const indexFilePath = resolve(resolve(dirPath, subDir), "index.ts");
          const fileContent = readFileSync(indexFilePath, "utf-8");
          if (/\sdisabled:\s?(true|([1-9][0-9]*)),?/.test(fileContent)) {
            console.warn(
              "⚠️ ",
              chalk.blue(indexFilePath),
              chalk.yellow(":本API已被禁用，跳过类型文件生成")
            );
            return;
          }
          declareContent += `\n        ${subDir}: typeof import("../../invokes/${dir}/${subDir}/exportFn")["${subDir}Fn"];`;
        });
        declareContent += "\n      };";
      } else {
        const disabledPath = [];
        content += `  ${dir}: {\n`;
        //添加一个属性，用于存放当前命名空间的通用数据，此属性不提供给编辑器的类型声明
        content += `    __NS_DATA__: Record<string, any>;\n`;
        subDirs.forEach((subDir) => {
          const indexFilePath = resolve(resolve(dirPath, subDir), "index.ts");
          const fileContent = readFileSync(indexFilePath, "utf-8");
          if (/\sdisabled:\s?(true|([1-9][0-9]*)),?/.test(fileContent)) {
            console.warn(
              "⚠️ ",
              chalk.blue(indexFilePath),
              chalk.yellow(":本API已被禁用，跳过类型文件生成")
            );
            disabledPath.push(indexFilePath);
            return;
          }
          content += `    ${subDir}: typeof import("../../invokes/${dir}/${subDir}/exportFn")["${subDir}Fn"];\n`;
        });
        content += "  };\n";
        declareContent += `\n      ${dir}: {`;
        //添加一个属性，用于存放当前命名空间的通用数据，此属性不提供给编辑器的类型声明
        declareContent += `\n        __NS_DATA__: Record<string, any>;`;
        subDirs.forEach((subDir) => {
          const indexFilePath = resolve(resolve(dirPath, subDir), "index.ts");
          if (disabledPath.includes(indexFilePath)) {
            return;
          }
          declareContent += `\n        ${subDir}: typeof import("../../invokes/${dir}/${subDir}/exportFn")["${subDir}Fn"];`;
        });
        declareContent += "\n      };";
      }
    }
  });
  if (genType === "declare") {
    const useCorePath = resolve(__dirname, "../src/hooks/useCore.ts");
    const coreString = readFileSync(useCorePath, "utf-8");
    const coreMatch = coreString.match(/CORE_NAMESPACES = ["'](.*?)['"]/);
    if (!(coreMatch && coreMatch[1])) {
      throw new Error("useCore.ts文件中没有找到CORE_NAMESPACES变量");
    }
    const CORE_NAMESPACES = coreMatch[1];
    const declareGlobalTemp = `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by /script/genBuiltInApiType.js
export {};
declare global {
  interface Window {
    ${CORE_NAMESPACES}: {${declareContent}
    } & ReturnType<typeof import("../../hooks/useScriptApi")["useBuiltInApi"]>;
  }
}
  `;
    const declareGlobalPath = resolve(__dirname, "../src/types/auto_gen_types/core.d.ts");
    writeFileSync(declareGlobalPath, declareGlobalTemp);
    console.log(
      "✨",
      "The core.d.ts file is generated in the: ",
      declareGlobalPath
    );
  } else {
    const outputPath = resolve(invokesPath, "../types/auto_gen_types/builtInApi.d.ts");
    const builtInApiType =
      "declare type BuiltInApiType = {\n" + content + "};\n";
    writeFileSync(outputPath, builtInApiType);
    console.log(
      "✨",
      "The",
      chalk.green("builtInApi.d.ts"),
      "file is generated in the:",
      chalk.blue(outputPath)
    );
    const useCorePath = resolve(__dirname, "../src/hooks/useCore.ts");
    const coreString = readFileSync(useCorePath, "utf-8");
    const coreMatch = coreString.match(/CORE_NAMESPACES = ["'](.*?)['"]/);
    if (!(coreMatch && coreMatch[1])) {
      throw new Error("useCore.ts文件中没有找到CORE_NAMESPACES变量");
    }
    const CORE_NAMESPACES = coreMatch[1];
    const declareGlobalTemp = `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by /script/genBuiltInApiType.js
export {};
declare global {
  interface Window {
    ${CORE_NAMESPACES}: {${declareContent}
    } & ReturnType<typeof import("../../hooks/useScriptApi")["useBuiltInApi"]>;
  }
}
  `;
    const declareGlobalPath = resolve(__dirname, "../src/types/auto_gen_types/core.d.ts");
    writeFileSync(declareGlobalPath, declareGlobalTemp);
    console.log(
      "✨",
      "The",
      chalk.green("core.d.ts"),
      "file is generated in the: ",
      chalk.blue(declareGlobalPath)
    );
  }
  console.timeEnd(chalk.green("generate use time"));
} catch (error) {
  console.error("声明文件生成失败！", error);
}
