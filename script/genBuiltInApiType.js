import { fileURLToPath } from "url";
import { dirname, resolve } from "path";
import { readdirSync } from "fs";
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const invokesPath = resolve(__dirname, "../src/invokes");
import { writeFileSync, readFileSync } from "fs";
let content = "";
let declareContent = "";
const genType = process.argv[2] || "api";
try {
  console.time("generate use time");
  const dirs = readdirSync(invokesPath, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name);
  dirs.forEach((dir) => {
    const dirPath = resolve(invokesPath, dir);
    const files = readdirSync(dirPath);
    if (files.includes("index.ts")) {
      if (genType === "declare") {
        declareContent += `\n      ${dir}: typeof import("./invokes/${dir}/exportFn")["${dir}Fn"];`;
      } else {
        content += `  ${dir}: typeof import("./${dir}/exportFn")["${dir}Fn"];\n`;
        declareContent += `\n      ${dir}: typeof import("./invokes/${dir}/exportFn")["${dir}Fn"];`;
      }
    } else {
      const subDirs = readdirSync(dirPath, { withFileTypes: true })
        .filter((dirent) => dirent.isDirectory())
        .map((dirent) => dirent.name);
      if (genType === "declare") {
        declareContent += `\n      ${dir}: {`;
        subDirs.forEach((subDir) => {
          declareContent += `\n        ${subDir}: typeof import("./invokes/${dir}/${subDir}/exportFn")["${subDir}Fn"];`;
        });
        declareContent += "\n      };";
      } else {
        content += `  ${dir}: {`;
        subDirs.forEach((subDir) => {
          content += `    ${subDir}: typeof import("./${dir}/${subDir}/exportFn")["${subDir}Fn"];\n`;
        });
        content += "  };\n";
        declareContent += `\n      ${dir}: {`;
        subDirs.forEach((subDir) => {
          declareContent += `\n        ${subDir}: typeof import("./invokes/${dir}/${subDir}/exportFn")["${subDir}Fn"];`;
        });
        declareContent += "\n      };";
      }
    }
  });
  if (genType === "declare") {
    const useCorePath = resolve(__dirname, "../src/hooks/useCore.ts");
    const coreString = readFileSync(useCorePath, "utf-8");
    const coreMatch = coreString.match(/CORE_NAMESPACES = ["'](.*?)['"]/);
    if (!(coreMatch && coreMatch[1])) {
      throw new Error("useCore.ts文件中没有找到CORE_NAMESPACES变量");
    }
    const CORE_NAMESPACES = coreMatch[1];
    const declareGlobalTemp = `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by script/genInvokeFnType.js
export {};
declare global {
  interface Window {
    ${CORE_NAMESPACES}: {${declareContent}
    } & ReturnType<typeof import("./hooks/useScriptApi")["useBuiltInApi"]>;
  }
}
  `;
    const declareGlobalPath = resolve(__dirname, "../src/core.d.ts");
    writeFileSync(declareGlobalPath, declareGlobalTemp);
    console.log("✨", "generate core.d.ts file in", declareGlobalPath);
  } else {
    const builtInApiType =
      "export type BuiltInApiType = {\n" + content + "};\n";
    writeFileSync(resolve(invokesPath, "BuiltInApiType.ts"), builtInApiType);
    console.log(
      "✨",
      "generate BuiltInApiType.ts file in",
      invokesPath + "\\BuiltInApiType.ts"
    );
    const useCorePath = resolve(__dirname, "../src/hooks/useCore.ts");
    const coreString = readFileSync(useCorePath, "utf-8");
    const coreMatch = coreString.match(/CORE_NAMESPACES = ["'](.*?)['"]/);
    if (!(coreMatch && coreMatch[1])) {
      throw new Error("useCore.ts文件中没有找到CORE_NAMESPACES变量");
    }
    const CORE_NAMESPACES = coreMatch[1];
    const declareGlobalTemp = `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by script/genInvokeFnType.js
export {};
declare global {
  interface Window {
    ${CORE_NAMESPACES}: {${declareContent}
    } & ReturnType<typeof import("./hooks/useScriptApi")["useBuiltInApi"]>;
  }
}
  `;
    const declareGlobalPath = resolve(__dirname, "../src/core.d.ts");
    writeFileSync(declareGlobalPath, declareGlobalTemp);
    console.log("✨", "generate core.d.ts file in", declareGlobalPath);
  }
  console.timeEnd("generate use time");
} catch (error) {
  console.error("声明文件生成失败！", error);
}
